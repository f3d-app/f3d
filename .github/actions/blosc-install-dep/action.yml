name: 'Install blosc Dependency'
description: 'Install blosc Dependency using cache when possible'
inputs:
  cpu:
    description: 'CPU architecture to build for'
    required: false
    default: 'x86_64'

runs:
  using: "composite"
  steps:

    - name: Cache blosc
      id: cache-blosc
      uses: actions/cache@v4
      with:
        path: dependencies/blosc_install
        key: blosc-1.21.5-${{runner.os}}-${{inputs.cpu}}-3

    # Dependents: openvdb vtk
    - name: Checkout blosc
      if: steps.cache-blosc.outputs.cache-hit != 'true'
      uses: actions/checkout@v3
      with:
        repository: Blosc/c-blosc
        path: './dependencies/blosc'
        ref: v1.21.5

    - name: Setup blosc
      if: steps.cache-blosc.outputs.cache-hit != 'true'
      working-directory: ${{github.workspace}}/dependencies
      shell: bash
      run: |
        mkdir blosc_build
        mkdir blosc_install

    - name: Configure blosc
      if: steps.cache-blosc.outputs.cache-hit != 'true'
      working-directory: ${{github.workspace}}/dependencies/blosc_build
      shell: bash
      run: >
        cmake ../blosc
        -DBUILD_BENCHMARKS=OFF
        -DBUILD_FUZZERS=OFF
        -DBUILD_SHARED=ON
        -DBUILD_STATIC=OFF
        -DBUILD_TESTS=OFF
        -DCMAKE_BUILD_TYPE=Release
        -DCMAKE_INSTALL_PREFIX=../blosc_install
        -DCMAKE_OSX_ARCHITECTURES=${{ inputs.cpu }}
        -DCMAKE_PREFIX_PATH:PATH=$(pwd)/../install/
        -DPREFER_EXTERNAL_ZLIB=ON
        ${{ runner.os == 'macOS' && '-DCMAKE_OSX_DEPLOYMENT_TARGET=10.15' || null }}
        ${{ runner.os == 'Windows' && '-Ax64 -DCMAKE_POLICY_DEFAULT_CMP0091=NEW -DCMAKE_MSVC_RUNTIME_LIBRARY=MultiThreadedDLL' || null }}

    - name: Build blosc
      if: steps.cache-blosc.outputs.cache-hit != 'true'
      working-directory: ${{github.workspace}}/dependencies/blosc_build
      shell: bash
      run: cmake --build . --parallel 2 --target install --config Release

    - name: Copy to install
      working-directory: ${{github.workspace}}/dependencies/blosc_install
      shell: bash
      run: cp -r ./* ../install/
