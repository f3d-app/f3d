name: 'Coverage CI'
description: 'Coverage CI'
inputs:
  lfs_sha:
    description: 'Cache LFS sha'
    required: true
  codecov_token:
    description: 'Codecov token, needed for non-forked workflows'
    required: false
    default: ''
  alembic_version:
    description: 'Version of alembic to build'
    required: false
  assimp_version:
    description: 'Version of assimp to build'
    required: false
  draco_version:
    description: 'Version of draco to build'
    required: false
  occt_version:
    description: 'Version of occt to build'
    required: false
  openexr_version:
    description: 'Version of openexr to build'
    required: false
  openvdb_version:
    description: 'Version of openvdb to build'
    required: false
  usd_version:
    description: 'Version of usd to build'
    required: false
  vtk_version:
    description: 'Version of vtk to build'
    required: true

runs:
  using: "composite"
  steps:

    - name: Check required inputs
      shell: bash
      run: |
        [[ "${{ inputs.lfs_sha }}" ]] || { echo "lfs_sha input is empty" ; exit 1; }
        [[ "${{ inputs.vtk_version }}" ]] || { echo "vtk_version input is empty" ; exit 1; }

    - name: Recover LFS Data
      uses: f3d-app/lfs-data-cache-action@v1
      with:
        type: 'consumer'
        lfs_sha: ${{inputs.lfs_sha}}
        cache_postfix: cache-0 

    - name: Install all F3D dependencies
      uses: ./source/.github/actions/generic-dependencies
      with:
        raytracing_label: raytracing
        alembic_version: ${{inputs.alembic_version}}
        assimp_version: ${{inputs.assimp_version}}
        draco_version: ${{inputs.draco_version}}
        occt_version: ${{inputs.occt_version}}
        openexr_version: ${{inputs.openexr_version}}
        openvdb_version: ${{inputs.openvdb_version}}
        usd_version: ${{inputs.usd_version}}

    - name: Install VTK dependency
      uses: ./source/.github/actions/vtk-install-dep
      with:
        vtk_version: ${{inputs.vtk_version}}
        raytracing_label: raytracing
        openvdb_version: ${{inputs.openvdb_version}}

    # coverage build is done in source as it seems to be required for codecov
    # CMAKE_MODULE_PATH is required because of
    # https://github.com/AcademySoftwareFoundation/openvdb/issues/1160
    - name: Configure
      shell: bash
      working-directory: ${{github.workspace}}/source
      run: >
        cmake ./
        -Werror=dev
        -Werror=deprecated
        --warn-uninitialized
        -DBUILD_TESTING=ON
        -DCMAKE_BUILD_TYPE=Release
        -DCMAKE_INSTALL_RPATH_USE_LINK_PATH=ON
        -DCMAKE_MODULE_PATH=$(pwd)/../dependencies/install/lib/cmake/OpenVDB/
        -DCMAKE_PREFIX_PATH:PATH=$(pwd)/../dependencies/install/
        -DF3D_COVERAGE=ON
        -DF3D_MODULE_EXR=ON
        -DF3D_MODULE_RAYTRACING=ON
        -DF3D_MODULE_UI=ON
        -DF3D_PLUGINS_STATIC_BUILD=OFF
        -DF3D_PLUGIN_BUILD_ALEMBIC=ON
        -DF3D_PLUGIN_BUILD_ASSIMP=ON
        -DF3D_PLUGIN_BUILD_DRACO=ON
        -DF3D_PLUGIN_BUILD_OCCT=ON
        -DF3D_PLUGIN_BUILD_USD=ON
        -DF3D_PLUGIN_BUILD_VDB=ON
        -DF3D_STRICT_BUILD=ON
        -DF3D_TESTING_ENABLE_EGL_TESTS=ON
        -DF3D_TESTING_ENABLE_EXTERNAL_GLFW=ON
        -DF3D_TESTING_ENABLE_EXTERNAL_QT=ON
        -DF3D_TESTING_ENABLE_GLX_TESTS=ON
        -DF3D_TESTING_ENABLE_LONG_TIMEOUT_TESTS=ON
        -DF3D_TESTING_ENABLE_OSMESA_TESTS=ON

    - name: Build
      shell: bash
      working-directory: ${{github.workspace}}/source
      run: cmake --build . --parallel 2 --config Release

    - name: Run Xvfb
      shell: bash
      run: Xvfb $DISPLAY -screen 0 1280x1024x24 &

    - name: Test
      shell: bash
      working-directory: ${{github.workspace}}/source
      run: ctest -C Release -j 2 --output-on-failure || ctest -C Release -j 1 --rerun-failed -VV

    - name: Upload Tests Artifact
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        path: ./source/Testing/Temporary
        name: f3d-tests-artifact-coverage

    - name: Generate XML Coverage
      shell: bash
      working-directory: ${{github.workspace}}/source
      run: |
        lcov --base-directory . --directory . -c -o coverage.info --gcov-tool /usr/bin/gcov
        lcov --remove coverage.info "*/external/*" -o coverage.info
        lcov --remove coverage.info "*Test*" -o coverage.info

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v5
      with:
        working-directory: ${{github.workspace}}/source
        token: ${{inputs.codecov_token}}
        fail_ci_if_error: true
        files: ${{github.workspace}}/source/coverage.info
        verbose: true
        use_oidc: false
        disable_search: true
