name: 'Install oidn Dependency'
description: 'Install oidn Dependency using cache when possible'
inputs:
  os:
    description: 'OS to build on'
    required: false
    default: 'ubuntu-latest'
runs:
  using: "composite"
  steps:

    - name: Cache oidn
      id: cache-oidn
      uses: actions/cache@v3
      with:
        path: dependencies/oidn_install
        key: oidn-v1.4.3-1-${{inputs.os}}

    - name: Checkout oidn manually
      if: steps.cache-oidn.outputs.cache-hit != 'true'
      working-directory: ${{github.workspace}}/dependencies
      shell: bash
      run: |
        git clone https://github.com/OpenImageDenoise/oidn.git
        cd oidn
        git checkout v1.4.3
        git submodule update --init --recursive
        cd weights
        git lfs fetch --all
        git lfs pull

    - name: Setup oidn
      if: steps.cache-oidn.outputs.cache-hit != 'true'
      working-directory: ${{github.workspace}}/dependencies
      shell: bash
      run: |
        mkdir oidn_build
        mkdir oidn_install

    - name: Configure oidn
      if: steps.cache-oidn.outputs.cache-hit != 'true'
      working-directory: ${{github.workspace}}/dependencies/oidn_build
      shell: bash
      run: >
        cmake ../oidn
        -DOIDN_APPS:BOOL=OFF
        -DTBB_ROOT:PATH=$(pwd)/../tbb_install/
        -DTBB_INCLUDE_DIR:PATH=$(pwd)/../tbb_install/include/
        -DISPC_EXECUTABLE=$(pwd)/../ispc/bin/ispc
        -DCMAKE_INSTALL_PREFIX:PATH=../oidn_install
        ${{ inputs.os == 'macos-latest' && '-DCMAKE_OSX_DEPLOYMENT_TARGET=10.15' || null }}
        ${{ inputs.os == 'windows-latest' && '-Ax64 -DCMAKE_POLICY_DEFAULT_CMP0091=NEW -DCMAKE_MSVC_RUNTIME_LIBRARY=MultiThreaded' || null }}

    - name: Build oidn
      if: steps.cache-oidn.outputs.cache-hit != 'true'
      working-directory: ${{github.workspace}}/dependencies/oidn_build
      shell: bash
      run: cmake --build . --parallel 2 --target install --config Release

    - name: Copy to install
      working-directory: ${{github.workspace}}/dependencies/oidn_install
      shell: bash
      run: cp -r ./* ../install/
