name: 'Install OpenVDB Dependency'
description: 'Install OpenVDB Dependency using cache when possible'
inputs:
  cpu:
    description: 'CPU architecture to build for'
    required: false
    default: 'x86_64'
  version:
    description: 'Version of openvdb to build'
    required: true

runs:
  using: "composite"
  steps:

    - name: Check required inputs
      shell: bash
      run: |
        [[ "${{ inputs.version }}" ]] || { echo "version input is empty" ; exit 1; }

    - name: Cache OpenVDB
      id: cache-openvdb
      uses: actions/cache/restore@v4
      with:
        path: dependencies/openvdb_install
        key: openvdb-${{inputs.version}}-${{runner.os}}-${{inputs.cpu}}-0

    # Dependents (not version): vtk
    - name: Checkout OpenVDB
      if: steps.cache-openvdb.outputs.cache-hit != 'true'
      uses: actions/checkout@v4
      with:
        repository: AcademySoftwareFoundation/openvdb
        path: './dependencies/openvdb'
        ref: ${{inputs.version}}

    - name: Setup OpenVDB
      if: steps.cache-openvdb.outputs.cache-hit != 'true'
      working-directory: ${{github.workspace}}/dependencies
      shell: bash
      run: |
        mkdir openvdb_build
        mkdir openvdb_install

    - name: Configure OpenVDB
      if: steps.cache-openvdb.outputs.cache-hit != 'true'
      working-directory: ${{github.workspace}}/dependencies/openvdb_build
      shell: bash
      run: >
        cmake ../openvdb
        -DBUILD_SHARED_LIBS=ON
        -DCMAKE_BUILD_TYPE=Release
        -DCMAKE_INSTALL_LIBDIR:PATH=lib
        -DCMAKE_INSTALL_PREFIX=../openvdb_install
        -DCMAKE_POSITION_INDEPENDENT_CODE=ON
        -DCMAKE_PREFIX_PATH:PATH=$(pwd)/../install/
        -DOPENVDB_BUILD_BINARIES=OFF
        -DOPENVDB_BUILD_VDB_PRINT:BOOL=OFF
        -DOPENVDB_CORE_STATIC=OFF
        -DOPENVDB_USE_DELAYED_LOADING=OFF
        -DUSE_BLOSC:BOOL=ON
        -DUSE_CCACHE:BOOL=OFF
        -DUSE_EXPLICIT_INSTANTIATION:BOOL=OFF
        -DUSE_ZLIB:BOOL=ON
        ${{ runner.os == 'macOS' && '-DCMAKE_OSX_DEPLOYMENT_TARGET=12.0' || null }}
        ${{ runner.os == 'Windows' && '-Ax64 -DCMAKE_POLICY_DEFAULT_CMP0091=NEW -DCMAKE_MSVC_RUNTIME_LIBRARY=MultiThreadedDLL' || null }}

    - name: Build OpenVDB
      if: steps.cache-openvdb.outputs.cache-hit != 'true'
      working-directory: ${{github.workspace}}/dependencies/openvdb_build
      shell: bash
      run: cmake --build . --parallel 2 --target install --config Release

    # OpenVDB is installing .cmake files that causes issues in F3D
    # https://github.com/AcademySoftwareFoundation/openvdb/issues/1741
    # https://github.com/AcademySoftwareFoundation/openvdb/issues/1740
    - name: Remove not needed .cmake file
      if: steps.cache-openvdb.outputs.cache-hit != 'true'
      working-directory: ${{github.workspace}}/dependencies/openvdb_install/lib/cmake/OpenVDB
      shell: bash
      run: rm FindTBB.cmake FindOpenEXR.cmake

    - name: Copy to install
      working-directory: ${{github.workspace}}/dependencies/openvdb_install
      shell: bash
      run: cp -r ./* ../install/

    - name: Save cache
      if: steps.cache-openvdb.outputs.cache-hit != 'true'
      uses: actions/cache/save@v4
      with:
        key: ${{ steps.cache-openvdb.outputs.cache-primary-key }}
        path: dependencies/openvdb_install
