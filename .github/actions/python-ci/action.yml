name: 'Python specific CI'
description: 'Python specific CI'
inputs:
  lfs_sha:
    description: 'Cache LFS sha'
    required: true
  python_version:
    description: 'Python version'
    required: true
  alembic_version:
    description: 'Version of alembic to build'
    required: false
  assimp_version:
    description: 'Version of assimp to build'
    required: false
  draco_version:
    description: 'Version of draco to build'
    required: false
  occt_version:
    description: 'Version of occt to build'
    required: false
  openexr_version:
    description: 'Version of openexr to build'
    required: false
  openvdb_version:
    description: 'Version of openvdb to build'
    required: false
  pybind11_version:
    description: 'Version of pybind11 to build'
    required: false
  usd_version:
    description: 'Version of usd to build'
    required: false
  vtk_version:
    description: 'Version of vtk to build'
    required: true

runs:
  using: "composite"
  steps:

    - name: Check required inputs
      shell: bash
      run: |
        [[ "${{ inputs.lfs_sha }}" ]] || { echo "lfs_sha input is empty" ; exit 1; }
        [[ "${{ inputs.python_version }}" ]] || { echo "python input is empty" ; exit 1; }
        [[ "${{ inputs.vtk_version }}" ]] || { echo "vtk_version input is empty" ; exit 1; }

    - name: Recover LFS Data
      uses: f3d-app/lfs-data-cache-action@v1
      with:
        type: 'consumer'
        lfs_sha: ${{inputs.lfs_sha}}
        cache_postfix: cache-0 

    - name: Install all F3D dependencies
      uses: ./source/.github/actions/generic-dependencies
      with:
        alembic_version: ${{inputs.alembic_version}}
        assimp_version: ${{inputs.assimp_version}}
        draco_version: ${{inputs.draco_version}}
        occt_version: ${{inputs.occt_version}}
        openexr_version: ${{inputs.openexr_version}}
        openvdb_version: ${{inputs.openvdb_version}}
        pybind11_version: ${{inputs.pybind11_version}}
        usd_version: ${{inputs.usd_version}}

    - name: Install VTK dependency
      uses: ./source/.github/actions/vtk-install-dep
      with:
        vtk_version: ${{inputs.vtk_version}}
        openvdb_version: ${{inputs.openvdb_version}}

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ inputs.python_version }}

    - name: Install Python dependencies
      shell: bash
      run: |
        python -m pip install --upgrade pip
        python -m pip install pytest==8.0.0

    - name: Set PATH windows
      if: runner.os == 'Windows'
      shell: powershell
      working-directory: ${{github.workspace}}
      run: echo "PATH=$env:PATH;$(pwd)\dependencies\install\bin\;$(pwd)\install\bin\;"| Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

    - name: Set CMAKE_PREFIX_PATH
      shell: bash
      working-directory: ${{github.workspace}}/dependencies/install
      run: echo "CMAKE_PREFIX_PATH=$(pwd)" >> $GITHUB_ENV

    - name: WORKSPACE env var with escaped backslashes Windows
      if: runner.os == 'Windows'
      shell: bash
      run: echo "WORKSPACE=${{github.workspace}}" | tr '\\' '/' >> $GITHUB_ENV

    - name: WORKSPACE env var not windows
      if: runner.os != 'Windows'
      shell: bash
      run: echo "WORKSPACE=$(pwd)" >> $GITHUB_ENV

    # VDB has some linking issue on macOS, disabling for now
    - name: Set SKBUILD_CMAKE_ARGS
      shell: bash
      run: >
        echo "SKBUILD_CMAKE_ARGS=
        -DCMAKE_MODULE_PATH=${{ env.WORKSPACE }}/dependencies/install/lib/cmake/OpenVDB/;
        -DF3D_DEPENDENCIES_DIR=${{ env.WORKSPACE }}/dependencies/install/bin;
        -DF3D_PLUGIN_BUILD_ALEMBIC=ON;
        -DF3D_PLUGIN_BUILD_ASSIMP=ON;
        -DF3D_PLUGIN_BUILD_DRACO=ON;
        -DF3D_PLUGIN_BUILD_OCCT=ON;
        -DF3D_PLUGIN_BUILD_USD=ON;
        -DF3D_PLUGIN_BUILD_VDB=${{ runner.os == 'macOS' && 'OFF' || 'ON' }};
        -DF3D_MACOS_BUNDLE=OFF;
        -DF3D_MODULE_EXR=ON;
        -DF3D_MODULE_UI=ON;
        -DF3D_WINDOWS_GUI=OFF" >> $GITHUB_ENV

    - name: Build wheel
      shell: bash
      working-directory: ${{github.workspace}}/source
      run: python -m pip -v wheel .

    - name: Upload wheel
      uses: actions/upload-artifact@v4
      with:
        path: ./source/*.whl
        name: ${{runner.os}}-${{inputs.python_version}}-wheel

    - name: Install wheel
      shell: bash
      working-directory: ${{github.workspace}}/source
      run: python -m pip -v install *.whl

    - name: Run Xvfb ubuntu
      if: runner.os == 'Linux'
      shell: bash
      run: Xvfb $DISPLAY -screen 0 1280x1024x24 &

    - name: Install Mesa Windows
      if: runner.os == 'Windows'
      uses: f3d-app/install-mesa-windows-action@v2
      with:
        path: ${{ env.Python_ROOT_DIR }}

    - name: Test wheel
      shell: bash
      working-directory: ${{github.workspace}}/source
      run: python -m pytest
