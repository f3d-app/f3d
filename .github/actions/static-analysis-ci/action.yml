name: 'Static analysis CI'
description: 'Static analysis CI'
inputs:
  lfs_sha:
    description: 'Cache LFS sha'
    required: true
  alembic_version:
    description: 'Version of alembic to build'
    required: true
  assimp_version:
    description: 'Version of assimp to build'
    required: true
  draco_version:
    description: 'Version of draco to build'
    required: true
  occt_version:
    description: 'Version of occt to build'
    required: true
  openexr_version:
    description: 'Version of openexr to build'
    required: true
  openvdb_version:
    description: 'Version of openvdb to build'
    required: true
  usd_version:
    description: 'Version of usd to build'
    required: true
  vtk_version:
    description: 'Version of vtk to build'
    required: true

runs:
  using: "composite"
  steps:

    - name: Check required inputs
      shell: bash
      run: |
        [[ "${{ inputs.lfs_sha }}" ]] || { echo "lfs_sha input is empty" ; exit 1; }
        [[ "${{ inputs.vtk_version }}" ]] || { echo "vtk_version input is empty" ; exit 1; }

    # Needed for BUILD_TESTING
    - name: Recover LFS Data
      uses: f3d-app/lfs-data-cache-action@v1
      with:
        type: 'consumer'
        lfs_sha: ${{inputs.lfs_sha}}
        cache_postfix: cache-0 

    - name: Install all F3D dependencies
      uses: ./source/.github/actions/generic-dependencies
      with:
        alembic_version: ${{inputs.alembic_version}}
        assimp_version: ${{inputs.assimp_version}}
        draco_version: ${{inputs.draco_version}}
        occt_version: ${{inputs.occt_version}}
        openexr_version: ${{inputs.openexr_version}}
        openvdb_version: ${{inputs.openvdb_version}}
        usd_version: ${{inputs.usd_version}}

    - name: Install VTK dependency
      uses: ./source/.github/actions/vtk-install-dep
      with:
        vtk_version: ${{inputs.vtk_version}}
        openvdb_version: ${{inputs.openvdb_version}}

    - name: Setup Build Directory
      shell: bash
      working-directory: ${{github.workspace}}
      run: mkdir build

    # CMAKE_MODULE_PATH is required because of
    # https://github.com/AcademySoftwareFoundation/openvdb/issues/1160
    - name: Configure
      shell: bash
      working-directory: ${{github.workspace}}/build
      run: >
        cmake ../source
        -Werror=dev
        -Werror=deprecated
        --warn-uninitialized
        -DBUILD_TESTING=ON
        -DCMAKE_BUILD_TYPE=Release
        -DCMAKE_MODULE_PATH=$(pwd)/../dependencies/install/lib/cmake/OpenVDB/
        -DCMAKE_PREFIX_PATH:PATH=$(pwd)/../dependencies/install/
        -DF3D_MODULE_EXR=ON
        -DF3D_MODULE_UI=ON
        -DF3D_PLUGIN_BUILD_ALEMBIC=ON
        -DF3D_PLUGIN_BUILD_ASSIMP=ON
        -DF3D_PLUGIN_BUILD_DRACO=ON
        -DF3D_PLUGIN_BUILD_OCCT=ON
        -DF3D_PLUGIN_BUILD_USD=ON
        -DF3D_PLUGIN_BUILD_VDB=ON
        -DF3D_STRICT_BUILD=ON
        -DCMAKE_EXPORT_COMPILE_COMMANDS=ON

    # It's necessary to run the build step to generate F3DIcon.h
    - name: Build
      shell: bash
      working-directory: ${{github.workspace}}/build
      run: cmake --build . --parallel 2

    - name: Clang-tidy
      shell: bash
      working-directory: ${{github.workspace}}/source
      run: run-clang-tidy -quiet -p ../build

    - name: Cppcheck
      shell: bash
      working-directory: ${{github.workspace}}/source
      run: >
        cppcheck -q
        --project=../build/compile_commands.json
        --enable=all
        --suppressions-list=.cppcheck.supp
        --inline-suppr
        --error-exitcode=1
