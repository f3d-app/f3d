name: "Install WebP Dependency"
description: "Install WebP Dependency using cache when possible"
inputs:
  cpu:
    description: "CPU architecture to build for"
    required: false
    default: "x86_64"
  version:
    description: "Version of WebP to build"
    required: true

runs:
  using: "composite"
  steps:
    - name: Check required inputs
      shell: bash
      run: |
        [[ "${{ inputs.version }}" ]] || { echo "version input is empty" ; exit 1; }

    - name: Cache WebP
      id: cache-webp
      uses: actions/cache/restore@v4
      with:
        path: dependencies/webp_install
        key: webp-${{inputs.version}}-${{runner.os}}-${{inputs.cpu}}-1

    - name: Checkout WebP
      if: steps.cache-webp.outputs.cache-hit != 'true'
      uses: actions/checkout@v4
      with:
        repository: webmproject/libwebp
        path: "./dependencies/webp"
        ref: ${{inputs.version}}

    - name: Setup WebP
      if: steps.cache-webp.outputs.cache-hit != 'true'
      working-directory: ${{github.workspace}}/dependencies
      shell: bash
      run: |
        mkdir webp_build
        mkdir webp_install

    - name: Configure WebP
      if: steps.cache-webp.outputs.cache-hit != 'true'
      working-directory: ${{github.workspace}}/dependencies/webp_build
      shell: bash
      run: >
        cmake ../webp
        -DBUILD_SHARED_LIBS=ON
        -DCMAKE_BUILD_TYPE=Release
        -DCMAKE_INSTALL_PREFIX:PATH=../webp_install
        -DCMAKE_PREFIX_PATH:PATH=../install/
        -DWEBP_BUILD_ANIM_UTILS=OFF
        -DWEBP_BUILD_CWEBP=OFF
        -DWEBP_BUILD_DWEBP=OFF
        -DWEBP_BUILD_GIF2WEBP=OFF
        -DWEBP_BUILD_IMG2WEBP=OFF
        -DWEBP_BUILD_VWEBP=OFF
        -DWEBP_BUILD_WEBPINFO=OFF
        -DWEBP_BUILD_LIBWEBPMUX=OFF
        -DWEBP_BUILD_WEBPMUX=OFF
        -DWEBP_BUILD_EXTRAS=OFF
        ${{ runner.os == 'macOS' && '-DCMAKE_OSX_DEPLOYMENT_TARGET=12.0 -DCMAKE_MACOSX_RPATH=ON' || null }}
        ${{ runner.os == 'Windows' && '-Ax64 -DCMAKE_POLICY_DEFAULT_CMP0091=NEW -DCMAKE_MSVC_RUNTIME_LIBRARY=MultiThreadedDLL' || null }}

    - name: Build WebP
      if: steps.cache-webp.outputs.cache-hit != 'true'
      working-directory: ${{github.workspace}}/dependencies/webp_build
      shell: bash
      run: cmake --build . --parallel 2 --target install --config Release

    - name: Copy to install
      working-directory: ${{github.workspace}}/dependencies/webp_install
      shell: bash
      run: cp -r ./* ../install/

    - name: Save cache
      if: steps.cache-webp.outputs.cache-hit != 'true'
      uses: actions/cache/save@v4
      with:
        key: ${{ steps.cache-webp.outputs.cache-primary-key }}
        path: dependencies/webp_install
