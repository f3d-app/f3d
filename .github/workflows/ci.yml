name: CI

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
  push:
    branches:
      - master

jobs:

#----------------------------------------------------------------------------
# MAIN CI: Build and test with a cross-platform, cross-vtk build matrix
#----------------------------------------------------------------------------
  ci:
    if: github.event.pull_request.draft == false

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        config:
          - { name: "VTK", vtk_version: commit, enable_tbb: 'true', enable_raytracing: 'true' }
          - { name: "VTK-9.2.2", vtk_version: v9.2.2, enable_tbb: 'true', enable_raytracing: 'true' }
          - { name: "VTK-9.1.0", vtk_version: v9.1.0, enable_tbb: 'true', enable_raytracing: 'true' }
          - { name: "VTK-9.0.0", vtk_version: v9.0.0, enable_tbb: 'false', enable_raytracing: 'false' }

    runs-on: ${{matrix.os}}
    container: ${{ matrix.os == 'ubuntu-latest' && 'ghcr.io/f3d-app/f3d-ci' || null }}

    env:
      DISPLAY: :0

    steps:

    - name: Checkout
      uses: actions/checkout@v3
      with:
        path: 'source'
        fetch-depth: 0
        lfs: 'false'

    - name: Setup JDK
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: '17'

    - name: Set LFS env var
      working-directory: ${{github.workspace}}/source
      shell: bash
      run: echo "LFS_SHA=$(git log -n 1 --pretty=format:%H -- testing/data/ testing/baselines/)" >> $GITHUB_ENV

    - name: Copy LFS Data
      uses: ./source/.github/actions/lfs-copy
      with:
        lfs_sha: ${{env.LFS_SHA}}

    - name: Dependencies Dir
      working-directory: ${{github.workspace}}
      run: |
        mkdir dependencies
        cd dependencies
        mkdir install

    - name: Install tbb dependency
      if: |
        matrix.config.enable_raytracing == 'true' ||
        matrix.config.enable_tbb == 'true'
      uses: ./source/.github/actions/tbb-install-dep
      with:
        os: ${{matrix.os}}

    - name: Install ispc dependency
      if: matrix.config.enable_raytracing == 'true'
      uses: ./source/.github/actions/ispc-install-tool
      with:
        os: ${{matrix.os}}

    - name: Install oidn dependency
      if: matrix.config.enable_raytracing == 'true'
      uses: ./source/.github/actions/oidn-install-dep
      with:
        os: ${{matrix.os}}

    - name: Install rkcommon dependency
      if: matrix.config.enable_raytracing == 'true'
      uses: ./source/.github/actions/rkcommon-install-dep
      with:
        os: ${{matrix.os}}

    - name: Install embree dependency
      if: matrix.config.enable_raytracing == 'true'
      uses: ./source/.github/actions/embree-install-dep
      with:
        os: ${{matrix.os}}

    - name: Install openvkl dependency
      if: matrix.config.enable_raytracing == 'true'
      uses: ./source/.github/actions/openvkl-install-dep
      with:
        os: ${{matrix.os}}

    - name: Install ospray dependency
      if: matrix.config.enable_raytracing == 'true'
      uses: ./source/.github/actions/ospray-install-dep
      with:
        os: ${{matrix.os}}

    - name: Install OCCT dependency
      uses: ./source/.github/actions/occt-install-dep
      with:
        os: ${{matrix.os}}

    - name: Install Assimp dependency
      uses: ./source/.github/actions/assimp-install-dep
      with:
        os: ${{matrix.os}}

    - name: Install Draco dependency
      uses: ./source/.github/actions/draco-install-dep
      with:
        os: ${{matrix.os}}

    - name: Install Imath dependency
      uses: ./source/.github/actions/imath-install-dep
      with:
        os: ${{matrix.os}}

    - name: Install Alembic dependency
      uses: ./source/.github/actions/alembic-install-dep
      with:
        os: ${{matrix.os}}

    - name: Install pybind11 dependency
      uses: ./source/.github/actions/pybind11-install-dep
      with:
        os: ${{matrix.os}}

    - name: Install VTK dependency
      uses: ./source/.github/actions/vtk-install-dep
      with:
        vtk_version: ${{matrix.config.vtk_version}}
        vtk_sha_file: ./source/.github/actions/vtk_commit_sha
        os: ${{matrix.os}}
        enable_tbb: ${{matrix.config.enable_tbb}}
        enable_raytracing: ${{matrix.config.enable_raytracing}}

    - name: Setup Directories
      working-directory: ${{github.workspace}}
      run: |
         mkdir build
         mkdir install

    # pwd seems necessary for OpenCASCADE and Assimp for some reasons
    - name: Configure
      working-directory: ${{github.workspace}}/build
      run: >
        cmake ../source
        -Werror=dev
        -Werror=deprecated
        --warn-uninitialized
        -DBUILD_TESTING=ON
        -DCMAKE_PREFIX_PATH:PATH=$(pwd)/../dependencies/install/
        -DCMAKE_BUILD_TYPE=Release
        -DCMAKE_BUILD_RPATH:PATH=$(pwd)/../dependencies/install/lib/
        -DCMAKE_INSTALL_PREFIX:PATH=../install
        -DCMAKE_INSTALL_RPATH_USE_LINK_PATH=ON
        -DF3D_STRICT_BUILD=ON
        -DF3D_MODULE_EXTERNAL_RENDERING=ON
        -DF3D_MODULE_RAYTRACING=${{ matrix.config.enable_raytracing == 'true' && 'ON' || 'OFF' }}
        -DF3D_PLUGIN_BUILD_ALEMBIC=ON
        -DF3D_PLUGIN_BUILD_ASSIMP=ON
        -DF3D_PLUGIN_BUILD_DRACO=ON
        -DF3D_PLUGIN_BUILD_OCCT=ON
        -DF3D_BINDINGS_JAVA=ON
        -DF3D_INSTALL_SDK=ON
        -DF3D_INSTALL_SDK_PLUGIN=ON
        -DF3D_INSTALL_DEFAULT_CONFIGURATION_FILE=ON
        ${{ matrix.os == 'windows-latest' && '-Ax64 -DF3D_WINDOWS_GUI=ON -DCMAKE_POLICY_DEFAULT_CMP0091=NEW -DCMAKE_MSVC_RUNTIME_LIBRARY=MultiThreaded' || null }}
        ${{ matrix.os == 'macos-latest' && '-DF3D_BINDINGS_PYTHON=ON -DF3D_MACOS_BUNDLE=ON -DCMAKE_OSX_DEPLOYMENT_TARGET=10.15' || null }}
        ${{ matrix.os == 'ubuntu-latest' && '-DF3D_BINDINGS_PYTHON=ON -DF3D_INSTALL_DEFAULT_CONFIGURATION_FILE_IN_PREFIX=ON -DF3D_INSTALL_MIME_TYPES_FILES=ON -DF3D_INSTALL_THUMBNAILER_FILES=ON -DF3D_ENABLE_LONG_TIMEOUT_TESTS=ON' || null }}
        ${{ matrix.config.vtk_version == 'commit' && '-DF3D_ENABLE_HDRI_TESTS=ON' || '-DF3D_ENABLE_HDRI_TESTS=OFF' }}
        ${{ matrix.config.vtk_version == 'v9.0.0' && '-DF3D_DISABLE_DEFAULT_LIGHTS_TESTS_COMPARISON=ON' || '-DF3D_DISABLE_DEFAULT_LIGHTS_TESTS_COMPARISON=OFF' }}

    - name: Build
      working-directory: ${{github.workspace}}/build
      run: cmake --build . --parallel 2 --config Release

    - name: Run Xvfb ubuntu
      if: matrix.os == 'ubuntu-latest'
      run: Xvfb $DISPLAY -screen 0 1280x1024x24 &

    - name: Install Mesa windows
      shell: cmd
      if: matrix.os == 'windows-latest'
      working-directory: ${{github.workspace}}/dependencies/
      run: |
        mkdir mesa
        cd mesa
        curl.exe -L --output mesa.7z --url https://github.com/pal1000/mesa-dist-win/releases/download/22.0.1/mesa3d-22.0.1-release-msvc.7z
        "C:\Program Files\7-Zip\7z.exe" x mesa.7z
        cp x64\opengl32.dll ..\..\build\bin\Release\
        cp x64\libglapi.dll ..\..\build\bin\Release\
        cp x64\libgallium_wgl.dll ..\..\build\bin\Release\

    - name: Set path env vars ubuntu
      working-directory: ${{github.workspace}}/dependencies/
      shell: bash
      run: echo "LD_LIBRARY_PATH=$(pwd)/install/lib:$LD_LIBRARY_PATH" >> $GITHUB_ENV


