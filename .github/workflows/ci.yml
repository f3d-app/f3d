name: Build And Test

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
  push:
    branches:
      - master

jobs:
  ci:
    if: github.event.pull_request.draft == false

    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        vtk_version: [a4bdbcd4b2, v9.1.0, v9.0.0]

    runs-on: ${{matrix.os}}
    container: ${{ matrix.os == 'ubuntu-latest' && 'ghcr.io/f3d-app/f3d-ci' || null }}

    env:
      DISPLAY: :0

    steps:
    - name: Dependencies Dir
      working-directory: ${{github.workspace}}
      run: mkdir dependencies

    - name: Cache OCCT
      id: cache-occt
      uses: actions/cache@v2
      with:
        path: dependencies/occt_install
        key: occt-V7_6_0-1-${{matrix.os}}

    - name: Checkout OCCT
      if: steps.cache-occt.outputs.cache-hit != 'true'
      uses: actions/checkout@v2
      with:
        repository: Open-Cascade-SAS/OCCT
        submodules: 'true'
        path: './dependencies/occt'
        ref: V7_6_0

    - name: Setup OCCT
      if: steps.cache-occt.outputs.cache-hit != 'true'
      working-directory: ${{github.workspace}}/dependencies
      run: |
        mkdir occt_build
        mkdir occt_install

    - name: Configure OCCT
      if: steps.cache-occt.outputs.cache-hit != 'true'
      working-directory: ${{github.workspace}}/dependencies/occt_build
      run: >
        cmake ../occt
        -DBUILD_LIBRARY_TYPE=Static
        -DBUILD_ADDITIONAL_TOOLKITS="TKSTEP;TKIGES;TKMesh"
        -DBUILD_MODULE_ApplicationFramework=OFF
        -DBUILD_MODULE_DataExchange=OFF
        -DBUILD_MODULE_Draw=OFF
        -DBUILD_MODULE_FoundationClasses=OFF
        -DBUILD_MODULE_ModelingAlgorithms=OFF
        -DBUILD_MODULE_ModelingData=OFF
        -DBUILD_MODULE_Visualization=OFF
        -DCMAKE_BUILD_TYPE=Release
        -DCMAKE_INSTALL_PREFIX:PATH=../occt_install
        ${{ matrix.os == 'windows-latest' && '-Ax64 -DCMAKE_POLICY_DEFAULT_CMP0091=NEW -DCMAKE_MSVC_RUNTIME_LIBRARY=MultiThreaded' || null }}

    - name: Build OCCT
      if: steps.cache-occt.outputs.cache-hit != 'true'
      working-directory: ${{github.workspace}}/dependencies/occt_build
      run: cmake --build . --parallel 2 --target install --config Release

    - name: Patch OCCT install macos
      if: |
        steps.cache-occt.outputs.cache-hit != 'true' &&
        matrix.os == 'macos-latest'
      working-directory: ${{github.workspace}}/dependencies
      run: sed -i '' 's/OpenCASCADE_LIBRARIES [A-Za-z0-9;]\+/OpenCASCADE_LIBRARIES TKSTEP;TKSTEPAttr;TKSTEP209;TKSTEPBase;TKIGES;TKBool;TKMesh;TKXSBase;TKBO;TKPrim;TKShHealing;TKTopAlgo;TKBRep;TKGeomAlgo;TKGeomBase;TKG3d;TKG2d;TKMath;TKernel/' occt_install/lib/cmake/opencascade/OpenCASCADEConfig.cmake

    - name: Patch OCCT install ubuntu
      if: |
        steps.cache-occt.outputs.cache-hit != 'true' &&
        matrix.os == 'ubuntu-latest'
      working-directory: ${{github.workspace}}/dependencies
      run: sed -i 's/OpenCASCADE_LIBRARIES [A-Za-z0-9;]\+/OpenCASCADE_LIBRARIES TKSTEP;TKSTEPAttr;TKSTEP209;TKSTEPBase;TKIGES;TKBool;TKMesh;TKXSBase;TKBO;TKPrim;TKShHealing;TKTopAlgo;TKBRep;TKGeomAlgo;TKGeomBase;TKG3d;TKG2d;TKMath;TKernel/' occt_install/lib/cmake/opencascade/OpenCASCADEConfig.cmake

    - name: Cache ASSIMP
      id: cache-assimp
      uses: actions/cache@v2
      with:
        path: dependencies/assimp_install
        key: assimp-v5.1.1-1-${{matrix.os}}

    - name: Checkout ASSIMP
      if: steps.cache-assimp.outputs.cache-hit != 'true'
      uses: actions/checkout@v2
      with:
        repository: assimp/assimp
        path: './dependencies/assimp'
        ref: v5.1.1

    - name: Setup ASSIMP
      if: steps.cache-assimp.outputs.cache-hit != 'true'
      working-directory: ${{github.workspace}}/dependencies
      run: |
        mkdir assimp_build
        mkdir assimp_install

    - name: Configure ASSIMP
      if: steps.cache-assimp.outputs.cache-hit != 'true'
      working-directory: ${{github.workspace}}/dependencies/assimp_build
      run: >
        cmake ../assimp
        -DBUILD_SHARED_LIBS=OFF
        -DASSIMP_NO_EXPORT=ON
        -DASSIMP_BUILD_ALL_IMPORTERS_BY_DEFAULT=OFF
        -DASSIMP_BUILD_FBX_IMPORTER=ON
        -DASSIMP_BUILD_OFF_IMPORTER=ON
        -DASSIMP_BUILD_COLLADA_IMPORTER=ON
        -DASSIMP_BUILD_DXF_IMPORTER=ON
        -DASSIMP_BUILD_TESTS=OFF
        -DASSIMP_BUILD_ASSIMP_TOOLS=OFF
        -DASSIMP_BUILD_SAMPLES=OFF
        -DCMAKE_BUILD_TYPE=Release
        -DCMAKE_INSTALL_PREFIX:PATH=../assimp_install
        ${{ matrix.os == 'windows-latest' && '-Ax64 -DCMAKE_POLICY_DEFAULT_CMP0091=NEW -DCMAKE_MSVC_RUNTIME_LIBRARY=MultiThreaded' || null }}

    - name: Build ASSIMP
      if: steps.cache-assimp.outputs.cache-hit != 'true'
      working-directory: ${{github.workspace}}/dependencies/assimp_build
      run: cmake --build . --parallel 2 --target install --config Release

    - name: Cache Imath
      id: cache-imath
      uses: actions/cache@v2
      with:
        path: dependencies/imath_install
        key: imath-v1.8.3-1-${{matrix.os}}

    - name: Checkout Imath
      if: steps.cache-imath.outputs.cache-hit != 'true'
      uses: actions/checkout@v2
      with:
        repository: AcademySoftwareFoundation/Imath
        path: './dependencies/imath'
        ref: v3.1.3

    - name: Setup Imath
      if: steps.cache-imath.outputs.cache-hit != 'true'
      working-directory: ${{github.workspace}}/dependencies
      run: |
        mkdir imath_build
        mkdir imath_install

    - name: Configure Imath
      if: steps.cache-imath.outputs.cache-hit != 'true'
      working-directory: ${{github.workspace}}/dependencies/imath_build
      run: >
        cmake ../imath
        -DBUILD_SHARED_LIBS=OFF
        -DBUILD_TESTING=OFF
        -DCMAKE_BUILD_TYPE=Release
        -DCMAKE_INSTALL_PREFIX:PATH=../imath_install
        ${{ matrix.os == 'windows-latest' && '-Ax64 -DCMAKE_POLICY_DEFAULT_CMP0091=NEW -DCMAKE_MSVC_RUNTIME_LIBRARY=MultiThreaded' || null }}

    - name: Build Imath
      if: steps.cache-imath.outputs.cache-hit != 'true'
      working-directory: ${{github.workspace}}/dependencies/imath_build
      run: cmake --build . --parallel 2 --target install --config Release

    - name: Cache Alembic
      id: cache-alembic
      uses: actions/cache@v2
      with:
        path: dependencies/alembic_install
        key: alembic-v1.8.3-3-${{matrix.os}}

    - name: Checkout Alembic
      if: steps.cache-alembic.outputs.cache-hit != 'true'
      uses: actions/checkout@v2
      with:
        repository: alembic/alembic
        path: './dependencies/alembic'
        ref: 1.8.3

    - name: Setup Alembic
      if: steps.cache-alembic.outputs.cache-hit != 'true'
      working-directory: ${{github.workspace}}/dependencies
      run: |
        mkdir alembic_build
        mkdir alembic_install

    - name: Configure Alembic
      if: steps.cache-alembic.outputs.cache-hit != 'true'
      working-directory: ${{github.workspace}}/dependencies/alembic_build
      run: >
        cmake ../alembic
        -DALEMBIC_SHARED_LIBS=OFF
        -DUSE_BINARIES=OFF
        -DBUILD_TESTING=OFF
        -DCMAKE_BUILD_TYPE=Release
        -DImath_DIR:PATH=$(pwd)/../imath_install/lib/cmake/Imath
        -DCMAKE_INSTALL_PREFIX:PATH=../alembic_install
        ${{ matrix.os == 'windows-latest' && '-Ax64 -DCMAKE_POLICY_DEFAULT_CMP0091=NEW -DCMAKE_MSVC_RUNTIME_LIBRARY=MultiThreaded' || null }}

    - name: Build Alembic
      if: steps.cache-alembic.outputs.cache-hit != 'true'
      working-directory: ${{github.workspace}}/dependencies/alembic_build
      run: cmake --build . --parallel 2 --target install --config Release

    - name: Cache VTK
      id: cache-vtk
      uses: actions/cache@v2
      with:
        path: dependencies/vtk_install
        key: vtk-${{matrix.vtk_version}}-1-${{matrix.os}}

    - name: Setup VTK and clone bare
      if: steps.cache-vtk.outputs.cache-hit != 'true'
      working-directory: ${{github.workspace}}/dependencies
      run: |
        mkdir vtk_build
        mkdir vtk_install
        git clone --bare https://github.com/Kitware/VTK.git bare

    - name: Set VTK env var
      if: steps.cache-vtk.outputs.cache-hit != 'true'
      working-directory: ${{github.workspace}}/dependencies/bare
      shell: bash
      run: echo "VTK_SHA=$(git rev-parse ${{matrix.vtk_version}})" >> $GITHUB_ENV

    - name: Checkout VTK
      if: steps.cache-vtk.outputs.cache-hit != 'true'
      uses: actions/checkout@v2
      with:
        repository: Kitware/VTK
        submodules: 'true'
        path: './dependencies/vtk'
        ref: ${{env.VTK_SHA}}

    - name: Patch VTK 9.0 source macos
      if: |
        steps.cache-vtk.outputs.cache-hit != 'true' &&
        matrix.os == 'macos-latest' &&
        matrix.vtk_version == 'v9.0.0'
      working-directory: ${{github.workspace}}/dependencies/vtk
      run: |
        sed -i '' '57i\'$'\n''herr_t H5O__fsinfo_set_version(H5F_t *f, H5O_fsinfo_t *fsinfo);' ThirdParty/hdf5/vtkhdf5/src/H5Fsuper.c
        sed -i '' '46i\'$'\n''#include "H5CXprivate.h"' ThirdParty/hdf5/vtkhdf5/src/H5Oint.c
        sed -i '' '36i\'$'\n''#include "H5CXprivate.h"' ThirdParty/hdf5/vtkhdf5/src/H5Rint.c

    - name: Configure VTK
      if: steps.cache-vtk.outputs.cache-hit != 'true'
      working-directory: ${{github.workspace}}/dependencies/vtk_build
      run: >
        cmake ../vtk
        -DVTK_ENABLE_LOGGING=OFF
        -DVTK_ENABLE_WRAPPING=OFF
        -DVTK_BUILD_TESTING=OFF
        -DCMAKE_BUILD_TYPE=Release
        -DVTK_LEGACY_REMOVE=ON
        -DVTK_VERSIONED_INSTALL=OFF
        -DBUILD_SHARED_LIBS=OFF
        -DCMAKE_INSTALL_PREFIX:PATH=../vtk_install
        -DVTK_GROUP_ENABLE_Rendering=DEFAULT
        -DVTK_GROUP_ENABLE_StandAlone=DEFAULT
        -DVTK_MODULE_ENABLE_VTK_CommonSystem=YES
        -DVTK_MODULE_ENABLE_VTK_FiltersGeneral=YES
        -DVTK_MODULE_ENABLE_VTK_FiltersGeometry=YES
        -DVTK_MODULE_ENABLE_VTK_ImagingCore=YES
        -DVTK_MODULE_ENABLE_VTK_ImagingHybrid=YES
        -DVTK_MODULE_ENABLE_VTK_InteractionStyle=YES
        -DVTK_MODULE_ENABLE_VTK_InteractionWidgets=YES
        -DVTK_MODULE_ENABLE_VTK_IOCityGML=YES
        -DVTK_MODULE_ENABLE_VTK_IOExodus=YES
        -DVTK_MODULE_ENABLE_VTK_IOGeometry=YES
        -DVTK_MODULE_ENABLE_VTK_IOImage=YES
        -DVTK_MODULE_ENABLE_VTK_IOImport=YES
        -DVTK_MODULE_ENABLE_VTK_IOParallel=YES
        -DVTK_MODULE_ENABLE_VTK_IOPLY=YES
        -DVTK_MODULE_ENABLE_VTK_IOXML=YES
        -DVTK_MODULE_ENABLE_VTK_RenderingAnnotation=YES
        -DVTK_MODULE_ENABLE_VTK_RenderingCore=YES
        -DVTK_MODULE_ENABLE_VTK_RenderingLabel=YES
        -DVTK_MODULE_ENABLE_VTK_RenderingOpenGL2=YES
        -DVTK_MODULE_ENABLE_VTK_RenderingVolumeOpenGL2=YES
        -DVTK_MODULE_ENABLE_VTK_jsoncpp=YES
        ${{ matrix.vtk_version != 'v9.0.0' && '-DVTK_ENABLE_REMOTE_MODULES=OFF -DVTK_SMP_IMPLEMENTATION_TYPE=STDThread' || null }}
        ${{ matrix.os == 'windows-latest' && '-Ax64 -DCMAKE_POLICY_DEFAULT_CMP0091=NEW -DCMAKE_MSVC_RUNTIME_LIBRARY=MultiThreaded' || null }}

    - name: Build VTK
      if: steps.cache-vtk.outputs.cache-hit != 'true'
      working-directory: ${{github.workspace}}/dependencies/vtk_build
      run: cmake --build . --parallel 2 --target install --config Release

    - name: Checkout
      uses: actions/checkout@v2
      with:
        path: 'source'
        fetch-depth: 0
        lfs: 'false'

    - name: Set LFS env var
      working-directory: ${{github.workspace}}/source
      shell: bash
      run: echo "LFS_SHA=$(git log -n 1 --pretty=format:%H -- testing/data/ testing/baselines/)" >> $GITHUB_ENV

    - name: Cache LFS data
      id: cache-lfs
      uses: actions/cache@v2
      with:
        path: lfs_data
        key: lfs-data-${{env.LFS_SHA}}

    - name: Checkout LFS data
      if: steps.cache-lfs.outputs.cache-hit != 'true'
      uses: actions/checkout@v2
      with:
        path: 'lfs_data'
        fetch-depth: 0
        lfs: 'true'

    - name: Setup LFS data
      working-directory: ${{github.workspace}}
      run: |
         cmake -E copy_directory ./lfs_data/testing/data ./source/testing/data
         cmake -E copy_directory ./lfs_data/testing/baselines ./source/testing/baselines

    - name: Setup Directories
      working-directory: ${{github.workspace}}
      run: |
         mkdir build
         mkdir install

    # pwd seems necessary for OpenCASCADE and Assimp for some reasons
    - name: Configure
      working-directory: ${{github.workspace}}/build
      run: >
        cmake ../source
        -DBUILD_TESTING=ON
        -DCMAKE_INSTALL_PREFIX:PATH=../install
        -DF3D_STRICT_BUILD=ON
        -DF3D_MODULE_OCCT=ON
        -DF3D_MODULE_ASSIMP=ON
        -DF3D_MODULE_ALEMBIC=ON
        -DCMAKE_BUILD_TYPE=Release
        -DVTK_DIR:PATH=../dependencies/vtk_install/lib/cmake/vtk
        -Dassimp_DIR:PATH=$(pwd)/../dependencies/assimp_install/lib/cmake/assimp-5.1
        -DAlembic_DIR:PATH=$(pwd)/../dependencies/alembic_install/lib/cmake/Alembic
        -DImath_DIR:PATH=$(pwd)/../dependencies/imath_install/lib/cmake/Imath
        -DF3D_INSTALL_DEFAULT_CONFIGURATION_FILE=ON
        ${{ matrix.os == 'windows-latest' && '-Ax64 -DF3D_INSTALL_SDK=ON -DF3D_WINDOWS_GUI=ON -DOpenCASCADE_DIR:PATH=$(pwd)/../dependencies/occt_install/cmake/ -DCMAKE_POLICY_DEFAULT_CMP0091=NEW -DCMAKE_MSVC_RUNTIME_LIBRARY=MultiThreaded' || null }}
        ${{ matrix.os == 'macos-latest' && '-DF3D_MACOS_BUNDLE=ON -DOpenCASCADE_DIR:PATH=$(pwd)/../dependencies/occt_install/lib/cmake/opencascade' || null }}
        ${{ matrix.os == 'ubuntu-latest' && '-DF3D_INSTALL_SDK=ON -DOpenCASCADE_DIR:PATH=$(pwd)/../dependencies/occt_install/lib/cmake/opencascade -DF3D_INSTALL_DEFAULT_CONFIGURATION_FILE_IN_PREFIX=ON -DF3D_GENERATE_MAN=ON -DF3D_INSTALL_MIME_TYPES_FILE=ON -DF3D_INSTALL_THUMBNAILER_FILES=ON -DF3D_ENABLE_LONG_TIMEOUT_TESTS=ON' || null }}

    - name: Build
      working-directory: ${{github.workspace}}/build
      run: cmake --build . --parallel 2 --config Release

    - name: Run Xvfb ubuntu
      if: matrix.os == 'ubuntu-latest'
      run: Xvfb $DISPLAY -screen 0 1280x1024x24 &

    - name: Install Mesa windows
      shell: cmd
      if: matrix.os == 'windows-latest'
      working-directory: ${{github.workspace}}/dependencies/
      run: |
        mkdir mesa
        cd mesa
        curl.exe -L --output mesa.7z --url https://github.com/pal1000/mesa-dist-win/releases/download/20.3.2/mesa3d-20.3.2-release-msvc.7z
        "C:\Program Files\7-Zip\7z.exe" x mesa.7z
        cp x64\opengl32.dll ..\..\build\bin\Release\
        cp x64\libglapi.dll ..\..\build\bin\Release\

    - name: Test
      working-directory: ${{github.workspace}}/build
      run: ctest -C Release -j 2 --output-on-failure || ctest -C Release -j 1 --rerun-failed

    - name: Install
      working-directory: ${{github.workspace}}/build
      run: cmake --install .

    - name: Check Install ubuntu
      if: matrix.os == 'ubuntu-latest'
      working-directory: ${{github.workspace}}/install
      run: ./bin/f3d ../source/testing/data/suzanne.obj --output=../output.png

    - name: Check Install windows
      if: matrix.os == 'windows-latest'
      working-directory: ${{github.workspace}}/install
      run: |
        cp ..\dependencies\mesa\x64\opengl32.dll .\bin\
        cp ..\dependencies\mesa\x64\libglapi.dll .\bin\
        .\bin\f3d.exe ..\source\testing\data\suzanne.obj --output=..\output.png

    - name: Check Install macos
      if: matrix.os == 'macos-latest'
      working-directory: ${{github.workspace}}/install
      run: ./f3d.app/Contents/MacOS/f3d ../source/testing/data/suzanne.obj --output=../output.png

    - name: Check SDK
      if: matrix.os != 'macos-latest'
      working-directory: ${{github.workspace}}
      run: |
        cmake -Df3d_DIR:PATH=$(pwd)/install/lib/cmake/f3d -B test_sdk source/.github/test_sdk 
        cmake --build test_sdk

    - name: Setup NSIS
      if: matrix.os == 'windows-latest'
      working-directory: ${{github.workspace}}
      run: cp source\.github\nsis\FileAssociation.nsh "C:/Program Files (x86)/NSIS/Include"

    - name: Packaging
      working-directory: ${{github.workspace}}/build
      run: cpack

    - name: Upload Artifacts
      uses: actions/upload-artifact@v2
      with:
        path: ./build/f3d-*
        name: f3d-${{matrix.os}}-${{matrix.vtk_version}}

    # pwd seems necessary for OpenCASCADE and Assimp for some reasons
    # coverage build is done in source as it seems to be required for codecov
    - name: Configure Coverage
      if: matrix.os == 'ubuntu-latest'
      working-directory: ${{github.workspace}}/source
      run: >
        cmake ./
        -DBUILD_TESTING=ON
        -DF3D_ENABLE_LONG_TIMEOUT_TESTS=ON
        -DF3D_STRICT_BUILD=ON
        -DF3D_MODULE_OCCT=ON
        -DF3D_MODULE_ASSIMP=ON
        -DF3D_MODULE_ALEMBIC=ON
        -DCMAKE_BUILD_TYPE=Release
        -DVTK_DIR:PATH=../dependencies/vtk_install/lib/cmake/vtk
        -DOpenCASCADE_DIR:PATH=$(pwd)/../dependencies/occt_install/lib/cmake/opencascade
        -Dassimp_DIR:PATH=$(pwd)/../dependencies/assimp_install/lib/cmake/assimp-5.1
        -DAlembic_DIR:PATH=$(pwd)/../dependencies/alembic_install/lib/cmake/Alembic
        -DImath_DIR:PATH=$(pwd)/../dependencies/imath_install/lib/cmake/Imath
        -DF3D_COVERAGE=ON

    - name: Build Coverage
      if: matrix.os == 'ubuntu-latest'
      working-directory: ${{github.workspace}}/source
      run: cmake --build . --parallel 2 --config Release

    - name: Test Coverage
      if: matrix.os == 'ubuntu-latest'
      working-directory: ${{github.workspace}}/source
      run: ctest -C Release -j 2 --output-on-failure

    - name: Generate XML Coverage
      if: matrix.os == 'ubuntu-latest'
      working-directory: ${{github.workspace}}/source
      run: |
        lcov --base-directory . --directory . -c -o coverage.info
        lcov --remove coverage.info "*/dependencies/*" -o coverage.info
        lcov --remove coverage.info "*/cxxopts.hpp" -o coverage.info

    - name: Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest'
      uses: codecov/codecov-action@v2
      with:
        files: ${{github.workspace}}/source/coverage.info
