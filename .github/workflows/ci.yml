name: CI

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
  push:
    branches:
      - master

jobs:

#----------------------------------------------------------------------------
# MAIN CI: Build and test with a cross-platform, cross-vtk build matrix
#----------------------------------------------------------------------------
  ci:
    if: github.event.pull_request.draft == false

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        config:
          - { name: "VTK", vtk_version: commit, enable_tbb: 'true', enable_raytracing: 'true' }
          - { name: "VTK-9.2.2", vtk_version: v9.2.2, enable_tbb: 'true', enable_raytracing: 'true' }
          - { name: "VTK-9.1.0", vtk_version: v9.1.0, enable_tbb: 'true', enable_raytracing: 'true' }
          - { name: "VTK-9.0.0", vtk_version: v9.0.0, enable_tbb: 'false', enable_raytracing: 'false' }

    runs-on: ${{matrix.os}}
    container: ${{ matrix.os == 'ubuntu-latest' && 'ghcr.io/f3d-app/f3d-ci' || null }}

    env:
      DISPLAY: :0

    steps:

    - name: Checkout
      uses: actions/checkout@v3
      with:
        path: 'source'
        fetch-depth: 0
        lfs: 'false'

    - name: Setup JDK
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: '17'

    - name: Set LFS env var
      working-directory: ${{github.workspace}}/source
      shell: bash
      run: echo "LFS_SHA=$(git log -n 1 --pretty=format:%H -- testing/data/ testing/baselines/)" >> $GITHUB_ENV

    - name: Copy LFS Data
      uses: ./source/.github/actions/lfs-copy
      with:
        lfs_sha: ${{env.LFS_SHA}}

    - name: Dependencies Dir
      working-directory: ${{github.workspace}}
      run: mkdir dependencies

    - name: Install tbb dependency
      if: |
        matrix.config.enable_raytracing == 'true' ||
        matrix.config.enable_tbb == 'true'
      uses: ./source/.github/actions/tbb-install-dep
      with:
        os: ${{matrix.os}}

    - name: Install ispc dependency
      if: matrix.config.enable_raytracing == 'true'
      uses: ./source/.github/actions/ispc-install-tool
      with:
        os: ${{matrix.os}}

    - name: Install oidn dependency
      if: matrix.config.enable_raytracing == 'true'
      uses: ./source/.github/actions/oidn-install-dep
      with:
        os: ${{matrix.os}}

    - name: Install rkcommon dependency
      if: matrix.config.enable_raytracing == 'true'
      uses: ./source/.github/actions/rkcommon-install-dep
      with:
        os: ${{matrix.os}}

    - name: Install embree dependency
      if: matrix.config.enable_raytracing == 'true'
      uses: ./source/.github/actions/embree-install-dep
      with:
        os: ${{matrix.os}}

    - name: Install openvkl dependency
      if: matrix.config.enable_raytracing == 'true'
      uses: ./source/.github/actions/openvkl-install-dep
      with:
        os: ${{matrix.os}}

    - name: Install ospray dependency
      if: matrix.config.enable_raytracing == 'true'
      uses: ./source/.github/actions/ospray-install-dep
      with:
        os: ${{matrix.os}}

    - name: Install OCCT dependency
      uses: ./source/.github/actions/occt-install-dep
      with:
        os: ${{matrix.os}}

    - name: Install Assimp dependency
      uses: ./source/.github/actions/assimp-install-dep
      with:
        os: ${{matrix.os}}

    - name: Install Draco dependency
      uses: ./source/.github/actions/draco-install-dep
      with:
        os: ${{matrix.os}}

    - name: Install Imath dependency
      uses: ./source/.github/actions/imath-install-dep
      with:
        os: ${{matrix.os}}

    - name: Install Alembic dependency
      uses: ./source/.github/actions/alembic-install-dep
      with:
        os: ${{matrix.os}}

    - name: Install pybind11 dependency
      uses: ./source/.github/actions/pybind11-install-dep
      with:
        os: ${{matrix.os}}

    - name: Install VTK dependency
      uses: ./source/.github/actions/vtk-install-dep
      with:
        vtk_version: ${{matrix.config.vtk_version}}
        vtk_sha_file: ./source/.github/actions/vtk_commit_sha
        os: ${{matrix.os}}
        enable_tbb: ${{matrix.config.enable_tbb}}
        enable_raytracing: ${{matrix.config.enable_raytracing}}

    - name: Setup Directories
      working-directory: ${{github.workspace}}
      run: |
         mkdir build
         mkdir install

    # pwd seems necessary for OpenCASCADE and Assimp for some reasons
    - name: Configure
      working-directory: ${{github.workspace}}/build
      run: >
        cmake ../source
        -Werror=dev
        -Werror=deprecated
        --warn-uninitialized
        -DBUILD_TESTING=ON
        -DCMAKE_INSTALL_PREFIX:PATH=../install
        -DCMAKE_INSTALL_RPATH_USE_LINK_PATH=ON
        -DF3D_STRICT_BUILD=ON
        -DF3D_MODULE_EXTERNAL_RENDERING=ON
        -DF3D_MODULE_RAYTRACING=${{ matrix.config.enable_raytracing == 'true' && 'ON' || 'OFF' }}
        -DF3D_PLUGIN_BUILD_ALEMBIC=ON
        -DF3D_PLUGIN_BUILD_ASSIMP=ON
        -DF3D_PLUGIN_BUILD_DRACO=ON
        -DF3D_PLUGIN_BUILD_OCCT=ON
        -DF3D_BINDINGS_JAVA=ON
        -DF3D_INSTALL_SDK=ON
        -DF3D_INSTALL_SDK_PLUGIN=ON
        -DCMAKE_BUILD_TYPE=Release
        -DVTK_DIR:PATH=$(pwd)/../dependencies/vtk_install/lib/cmake/vtk
        -Dassimp_DIR:PATH=$(pwd)/../dependencies/assimp_install/lib/cmake/assimp-5.1
        -DAlembic_DIR:PATH=$(pwd)/../dependencies/alembic_install/lib/cmake/Alembic
        -DImath_DIR:PATH=$(pwd)/../dependencies/imath_install/lib/cmake/Imath
        -Ddraco_DIR:PATH=$(pwd)/../dependencies/draco_install/share/cmake/draco
        -Dpybind11_DIR:PATH=$(pwd)/../dependencies/pybind11_install/share/cmake/pybind11
        -Dospray_DIR:PATH=$(pwd)/../dependencies/ospray_install/lib/cmake/ospray-2.7.1/
        -Dembree_DIR:PATH=$(pwd)/../dependencies/embree_install/lib/cmake/embree-3.13.1
        -Drkcommon_DIR:PATH=$(pwd)/../dependencies/rkcommon_install/lib/cmake/rkcommon-1.7.0
        -Dopenvkl_DIR:PATH=$(pwd)/../dependencies/openvkl_install/lib/cmake/openvkl-1.0.1
        -DOpenImageDenoise_DIR:PATH=$(pwd)/../dependencies/oidn_install/lib/cmake/OpenImageDenoise-1.4.3
        -DTBB_DIR:PATH=$(pwd)/../dependencies/tbb_install/lib/cmake/TBB/
        -DF3D_INSTALL_DEFAULT_CONFIGURATION_FILE=ON
        ${{ matrix.os == 'windows-latest' && '-Ax64 -DF3D_WINDOWS_GUI=ON -DOpenCASCADE_DIR:PATH=$(pwd)/../dependencies/occt_install/cmake/ -DCMAKE_POLICY_DEFAULT_CMP0091=NEW -DCMAKE_MSVC_RUNTIME_LIBRARY=MultiThreaded' || null }}
        ${{ matrix.os == 'macos-latest' && '-DF3D_BINDINGS_PYTHON=ON -DF3D_MACOS_BUNDLE=ON -DCMAKE_OSX_DEPLOYMENT_TARGET=10.15 -DOpenCASCADE_DIR:PATH=$(pwd)/../dependencies/occt_install/lib/cmake/opencascade' || null }}
        ${{ matrix.os == 'ubuntu-latest' && '-DF3D_BINDINGS_PYTHON=ON -DOpenCASCADE_DIR:PATH=$(pwd)/../dependencies/occt_install/lib/cmake/opencascade -DF3D_INSTALL_DEFAULT_CONFIGURATION_FILE_IN_PREFIX=ON -DF3D_INSTALL_MIME_TYPES_FILES=ON -DF3D_INSTALL_THUMBNAILER_FILES=ON -DF3D_ENABLE_LONG_TIMEOUT_TESTS=ON' || null }}
        ${{ matrix.config.vtk_version == 'commit' && '-DF3D_ENABLE_HDRI_TESTS=ON' || '-DF3D_ENABLE_HDRI_TESTS=OFF' }}
        ${{ matrix.config.vtk_version == 'v9.0.0' && '-DF3D_DISABLE_DEFAULT_LIGHTS_TESTS_COMPARISON=ON' || '-DF3D_DISABLE_DEFAULT_LIGHTS_TESTS_COMPARISON=OFF' }}

    - name: Build
      working-directory: ${{github.workspace}}/build
      run: cmake --build . --parallel 2 --config Release

    - name: env var win
      if: matrix.os == 'windows-latest'
      working-directory: ${{github.workspace}}/dependencies/
      shell: powershell
      run: echo "PATH=$env:PATH;$(pwd)\oidn_install\bin;$(pwd)\vtk_install\bin;$(pwd)\assimp_install\bin;$(pwd)\alembic_install\bin;$(pwd)\imath_install\bin;$(pwd)\draco_install\bin;$(pwd)\ospray_install\bin;$(pwd)\embree_install\bin;$(pwd)\rkcommon_install\bin;$(pwd)\openvkl_install\bin;$(pwd)\tbb_install\bin" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

    - name: Run Xvfb ubuntu
      if: matrix.os == 'ubuntu-latest'
      run: Xvfb $DISPLAY -screen 0 1280x1024x24 &

    - name: Install Mesa windows
      shell: cmd
      if: matrix.os == 'windows-latest'
      working-directory: ${{github.workspace}}/dependencies/
      run: |
        mkdir mesa
        cd mesa
        curl.exe -L --output mesa.7z --url https://github.com/pal1000/mesa-dist-win/releases/download/22.0.1/mesa3d-22.0.1-release-msvc.7z
        "C:\Program Files\7-Zip\7z.exe" x mesa.7z
        cp x64\opengl32.dll ..\..\build\bin\Release\
        cp x64\libglapi.dll ..\..\build\bin\Release\
        cp x64\libgallium_wgl.dll ..\..\build\bin\Release\

    - name: Test
      working-directory: ${{github.workspace}}/build
      run: |
        otool -l ./bin/f3d
        ctest -C Release -j 2 --output-on-failure || ctest -C Release -j 1 --rerun-failed -VV

    - name: Upload Tests Artifact
      if: failure()
      uses: actions/upload-artifact@v3
      with:
        path: ./build/Testing/Temporary
        name: f3d-tests-artifact-${{matrix.os}}-${{matrix.config.vtk_version}}

    - name: Install
      working-directory: ${{github.workspace}}/build
      run: cmake --install .

    - name: Check Install ubuntu
      if: matrix.os == 'ubuntu-latest'
      working-directory: ${{github.workspace}}/install
      run: ./bin/f3d ../source/testing/data/suzanne.obj --output=../output.png

    - name: Check Install windows
      if: matrix.os == 'windows-latest'
      working-directory: ${{github.workspace}}/install
      run: |
        cp ..\dependencies\mesa\x64\opengl32.dll .\bin\
        cp ..\dependencies\mesa\x64\libglapi.dll .\bin\
        cp ..\dependencies\mesa\x64\libgallium_wgl.dll .\bin\
        .\bin\f3d.exe ..\source\testing\data\suzanne.obj --output=..\output.png

    - name: Check Install macos
      if: matrix.os == 'macos-latest'
      working-directory: ${{github.workspace}}/install
      run: ./f3d.app/Contents/MacOS/f3d ../source/testing/data/suzanne.obj --output=../output.png

    # TODO: This job should be replaced by a useful example using the libf3d API and merged with the next job
    - name: Check SDK
      if: matrix.os != 'macos-latest'
      working-directory: ${{github.workspace}}
      run: |
        cmake -Werror=dev -Werror=deprecated --warn-uninitialized -Df3d_DIR:PATH=$(pwd)/install/lib/cmake/f3d -B test_sdk source/.github/test_sdk
        cmake --build test_sdk

    # TODO when VTK is built as a shared library:
    # - Enable on all OS
    # - Add -Werror=dev CMake option
    # - Run ctest
    - name: Validate plugin example
      if: matrix.os == 'ubuntu-latest'
      working-directory: ${{github.workspace}}
      run: |
        cmake -Werror=deprecated --warn-uninitialized -Df3d_DIR:PATH=$(pwd)/install/lib/cmake/f3d -DVTK_DIR:PATH=$(pwd)/dependencies/vtk_install/lib/cmake/vtk -DTBB_DIR:PATH=$(pwd)/dependencies/tbb_install/lib/cmake/TBB/ -B build_plugin source/examples/plugins/example-plugin
        cmake --build build_plugin --config Release
        ctest --test-dir build_plugin -C Release -VV

#----------------------------------------------------------------------------
# Coverage: Build and test on linux with last VTK with coverage option
#----------------------------------------------------------------------------
  coverage:
    if: github.event.pull_request.draft == false

    runs-on: ubuntu-latest
    container: ghcr.io/f3d-app/f3d-ci

    env:
      DISPLAY: :0

    steps:

    - name: Checkout
      uses: actions/checkout@v3
      with:
        path: 'source'
        fetch-depth: 0
        lfs: 'false'

    - name: Set LFS env var
      working-directory: ${{github.workspace}}/source
      shell: bash
      run: echo "LFS_SHA=$(git log -n 1 --pretty=format:%H -- testing/data/ testing/baselines/)" >> $GITHUB_ENV

    - name: Copy LFS Data
      uses: ./source/.github/actions/lfs-copy
      with:
        lfs_sha: ${{env.LFS_SHA}}

    - name: Dependencies Dir
      working-directory: ${{github.workspace}}
      run: mkdir dependencies

    - name: Install OCCT dependency
      uses: ./source/.github/actions/occt-install-dep

    - name: Install Assimp dependency
      uses: ./source/.github/actions/assimp-install-dep

    - name: Install Draco dependency
      uses: ./source/.github/actions/draco-install-dep

    - name: Install Imath dependency
      uses: ./source/.github/actions/imath-install-dep

    - name: Install Alembic dependency
      uses: ./source/.github/actions/alembic-install-dep

    - name: Install VTK dependency
      uses: ./source/.github/actions/vtk-install-dep
      with:
        vtk_sha_file: ./source/.github/actions/vtk_commit_sha

    # pwd seems necessary for OpenCASCADE and Assimp for some reasons
    # coverage build is done in source as it seems to be required for codecov
    - name: Configure
      working-directory: ${{github.workspace}}/source
      run: >
        cmake ./
        -Werror=dev
        -Werror=deprecated
        --warn-uninitialized
        -DBUILD_TESTING=ON
        -DF3D_ENABLE_LONG_TIMEOUT_TESTS=ON
        -DF3D_STRICT_BUILD=ON
        -DF3D_MODULE_EXTERNAL_RENDERING=ON
        -DF3D_PLUGIN_BUILD_ALEMBIC=ON
        -DF3D_PLUGIN_BUILD_ASSIMP=ON
        -DF3D_PLUGIN_BUILD_DRACO=ON
        -DF3D_PLUGIN_BUILD_OCCT=ON
        -DCMAKE_BUILD_TYPE=Release
        -DVTK_DIR:PATH=$(pwd)/../dependencies/vtk_install/lib/cmake/vtk
        -DOpenCASCADE_DIR:PATH=$(pwd)/../dependencies/occt_install/lib/cmake/opencascade
        -Dassimp_DIR:PATH=$(pwd)/../dependencies/assimp_install/lib/cmake/assimp-5.1
        -DAlembic_DIR:PATH=$(pwd)/../dependencies/alembic_install/lib/cmake/Alembic
        -DImath_DIR:PATH=$(pwd)/../dependencies/imath_install/lib/cmake/Imath
        -Ddraco_DIR:PATH=$(pwd)/../dependencies/draco_install/share/cmake/draco
        -DF3D_COVERAGE=ON

    - name: Build
      working-directory: ${{github.workspace}}/source
      run: cmake --build . --parallel 2 --config Release

    - name: Run Xvfb
      run: Xvfb $DISPLAY -screen 0 1280x1024x24 &

    - name: Test
      working-directory: ${{github.workspace}}/source
      run: ctest -C Release -j 2 --output-on-failure || ctest -C Release -j 1 --rerun-failed -VV

    - name: Generate XML Coverage
      working-directory: ${{github.workspace}}/source
      run: |
        lcov --base-directory . --directory . -c -o coverage.info --gcov-tool /usr/bin/gcov-8
        lcov --remove coverage.info "*/dependencies/*" -o coverage.info
        lcov --remove coverage.info "*/cxxopts.hpp" -o coverage.info
        lcov --remove coverage.info "*/json.hpp" -o coverage.info
        lcov --remove coverage.info "*Test*" -o coverage.info

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        files: ${{github.workspace}}/source/coverage.info

#----------------------------------------------------------------------------
# Sanitizer: Build and test on linux with last VTK with sanitizer options
#----------------------------------------------------------------------------
# "leak" is run by default with "address" so we do not need to run it in CI
# "memory" returns false positives in VTK:
# https://stackoverflow.com/questions/60097307/memory-sanitizer-reports-use-of-uninitialized-value-in-global-object-constructio
  sanitizer:
    if: github.event.pull_request.draft == false

    strategy:
      fail-fast: false
      matrix:
        santype: [address, thread, undefined]

    runs-on: ubuntu-latest
    container: ghcr.io/f3d-app/f3d-ci

    env:
      DISPLAY: :0
      CC: clang-10
      CXX: clang++-10

    steps:

    - name: Checkout
      uses: actions/checkout@v3
      with:
        path: 'source'
        fetch-depth: 0
        lfs: 'false'

    - name: Set LFS env var
      working-directory: ${{github.workspace}}/source
      shell: bash
      run: echo "LFS_SHA=$(git log -n 1 --pretty=format:%H -- testing/data/ testing/baselines/)" >> $GITHUB_ENV

    - name: Copy LFS Data
      uses: ./source/.github/actions/lfs-copy
      with:
        lfs_sha: ${{env.LFS_SHA}}

    - name: Dependencies Dir
      working-directory: ${{github.workspace}}
      run: mkdir dependencies

    - name: Install OCCT dependency
      uses: ./source/.github/actions/occt-install-dep

    - name: Install Assimp dependency
      uses: ./source/.github/actions/assimp-install-dep

    - name: Install Draco dependency
      uses: ./source/.github/actions/draco-install-dep

    - name: Install Imath dependency
      uses: ./source/.github/actions/imath-install-dep

    - name: Install Alembic dependency
      uses: ./source/.github/actions/alembic-install-dep

    - name: Install VTK dependency
      uses: ./source/.github/actions/vtk-install-dep
      with:
        vtk_sha_file: ./source/.github/actions/vtk_commit_sha

    - name: Setup Build Directory
      working-directory: ${{github.workspace}}
      run: mkdir build

    # pwd seems necessary for OpenCASCADE and Assimp for some reasons
    - name: Configure
      working-directory: ${{github.workspace}}/build
      run: >
        cmake ../source
        -Werror=dev
        -Werror=deprecated
        --warn-uninitialized
        -DBUILD_TESTING=ON
        -DF3D_ENABLE_LONG_TIMEOUT_TESTS=ON
        -DF3D_STRICT_BUILD=ON
        -DF3D_MODULE_EXTERNAL_RENDERING=ON
        -DF3D_PLUGIN_BUILD_ALEMBIC=ON
        -DF3D_PLUGIN_BUILD_ASSIMP=ON
        -DF3D_PLUGIN_BUILD_DRACO=ON
        -DF3D_PLUGIN_BUILD_OCCT=ON
        -DCMAKE_BUILD_TYPE=Release
        -DVTK_DIR:PATH=$(pwd)/../dependencies/vtk_install/lib/cmake/vtk
        -DOpenCASCADE_DIR:PATH=$(pwd)/../dependencies/occt_install/lib/cmake/opencascade
        -Dassimp_DIR:PATH=$(pwd)/../dependencies/assimp_install/lib/cmake/assimp-5.1
        -DAlembic_DIR:PATH=$(pwd)/../dependencies/alembic_install/lib/cmake/Alembic
        -DImath_DIR:PATH=$(pwd)/../dependencies/imath_install/lib/cmake/Imath
        -Ddraco_DIR:PATH=$(pwd)/../dependencies/draco_install/share/cmake/draco
        -DF3D_SANITIZER=${{matrix.santype}}

    - name: Build
      working-directory: ${{github.workspace}}/build
      run: cmake --build . --parallel 2 --config Release

    - name: Run Xvfb
      run: Xvfb $DISPLAY -screen 0 1280x1024x24 &

    - name: Test
      working-directory: ${{github.workspace}}/build
      run: |
        export LSAN_OPTIONS=suppressions=$(pwd)/../source/.lsan.supp:use_tls=0
        export TSAN_OPTIONS=suppressions=$(pwd)/../source/.tsan.supp
        ctest -C Release -j 2 --output-on-failure || ctest -C Release -j 1 --rerun-failed -VV
