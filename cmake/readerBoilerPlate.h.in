/**
 * This file is auto-generated by CMake, do not edit directly.
 */

#ifndef F3D@F3D_READER_NAME@_h
#define F3D@F3D_READER_NAME@_h

#include "reader.h"

#if @F3D_READER_HAS_GEOMETRY_READER@
#include <@F3D_READER_VTK_READER@.h>
#endif

#if @F3D_READER_HAS_SCENE_READER@
#include <@F3D_READER_VTK_IMPORTER@.h>
#endif

#include <vtkVersion.h>
#include <vtksys/SystemTools.hxx>

class reader_@F3D_READER_NAME@ : public f3d::reader
{
public:
  reader_@F3D_READER_NAME@() = default;

  /*
   * Get the name of this reader
   */
  const std::string getName() const override { return "@F3D_READER_NAME@"; }

  /*
   * Get the short description of this reader
   */
  const std::string getShortDescription() const override { return "@F3D_READER_FORMAT_DESCRIPTION@"; }

  /*
   * Get the extensions supported by this reader
   */
  const std::vector<std::string> getExtensions() const override
  {
    static const std::vector<std::string> ext = { @F3D_READER_EXTENSIONS@ };
    return ext;
  }

  /*
   * Get the mimetypes supported by this reader
   */
  virtual const std::vector<std::string> getMimeTypes() const override
  {
    static const std::vector<std::string> types = { @F3D_READER_MIMETYPES@ };
    return types;
  }

#if @F3D_READER_HAS_SCORE@
  /*
   * Get the score of this reader.
   * The score is used in case several readers are able to read the file.
   * The reader having the highest score (from 0 to 100) is used to read the file.
   * Default is 50.
   */
  int getScore() const override
  {
    return @F3D_READER_SCORE@;
  }
#endif

#if @F3D_READER_HAS_GEOMETRY_READER@
  /**
   * Return true if this reader can create a geometry reader
   * false otherwise
   */
  bool hasGeometryReader() override
  {
    return true;
  }

  /*
   * Create the geometry reader (VTK reader) for the given filename
   * The filename is collapsed as some VTK reader needs it to read reliably TODO add issue
   */
  vtkSmartPointer<vtkAlgorithm> createGeometryReader(const std::string& fileName) const override
  {
    vtkNew<@F3D_READER_VTK_READER@> geomReader;
    geomReader->SetFileName(vtksys::SystemTools::CollapseFullPath(fileName).c_str());

    this->applyCustomReader(geomReader, fileName);

    return geomReader;
  }
#endif

#if @F3D_READER_HAS_SCENE_READER@
  /**
   * Return true if this reader can create a scene reader
   * false otherwise
   */
  bool hasSceneReader() override
  {
    return true;
  }

  /*
   * Create the scene reader (VTK importer) for the given filename
   * The filename is collapsed as some VTK reader needs it to read reliably TODO add issue
   */
  vtkSmartPointer<vtkImporter> createSceneReader(const std::string& fileName) const override
  {
    vtkNew<@F3D_READER_VTK_IMPORTER@> importer;
    importer->SetFileName(vtksys::SystemTools::CollapseFullPath(fileName).c_str());

    this->applyCustomImporter(importer, fileName);

    return importer;
  }
#endif

#if @F3D_READER_HAS_CUSTOM_CODE@
#include "@F3D_READER_CUSTOM_CODE@"
#endif

};

#endif
