#ifndef f3d_options_generated_h
#define f3d_options_generated_h

#include "options.h"
#include "options_tools.h"
#include "types.h"

namespace f3d
{
namespace options_generated
{
//----------------------------------------------------------------------------
/**
 * Generated method, see `options::set`
 */
void set(options& opt, std::string_view name, const option_variant_t& value)
{
  try
  {
    // clang-format off
    ${_options_setter};
    // clang-format on
    else throw options::inexistent_exception("Option " + std::string(name) + " does not exist");
  }
  catch (const std::bad_variant_access&)
  {
    throw options::incompatible_exception(
      "Trying to set " + std::string(name) + " with incompatible type");
  }
  catch (const f3d::type_construction_exception& ex)
  {
    throw options::incompatible_exception(
      "Could not create type for " + std::string(name) + " : " + ex.what());
  }
}

//----------------------------------------------------------------------------
/**
 * Generated method, see `options::get`
 */
option_variant_t get(const options& opt, std::string_view name)
{
  try
  {
    // clang-format off
    ${_options_getter};
    // clang-format on
    else throw options::inexistent_exception("Option " + std::string(name) + " does not exist");
  }
  catch (const std::bad_optional_access&)
  {
    throw options::no_value_exception("Trying to get " + std::string(name) + " before it was set");
  }
}

//----------------------------------------------------------------------------
/**
 * Generated method, see `options::getNames`
 */
std::vector<std::string> getNames()
{
  // clang-format off
  return { ${_options_lister} };
  // clang-format on
}

//----------------------------------------------------------------------------
/**
 * Generated method, see `options::setAsString`
 */
void setAsString(options& opt, std::string_view name, const std::string& str)
{
  // clang-format off
  ${_options_string_setter};
  // clang-format on
  else throw options::inexistent_exception("Option " + std::string(name) + " does not exist");
}
//----------------------------------------------------------------------------
/**
 * Generated method, see `options::getAsString`
 */
std::string getAsString(const options& opt, std::string_view name)
{
  try
  {
    // clang-format off
    ${_options_string_getter};
    // clang-format on
    else throw options::inexistent_exception("Option " + std::string(name) + " does not exist");
  }
  catch (const std::bad_optional_access&)
  {
    throw options::no_value_exception("Trying to get " + std::string(name) + " before it was set");
  }
}

//----------------------------------------------------------------------------
/**
 * Generated method, see `options::isOptional`
 */
bool isOptional(std::string_view name)
{
  // clang-format off
  ${_options_is_optional};
  // clang-format on
  else throw options::inexistent_exception("Option " + std::string(name) + " does not exist");
}

//----------------------------------------------------------------------------
/**
 * Generated method, see `options::reset`
 */
void reset(options& opt, std::string_view name)
{
  // clang-format off
  ${_options_reset};
  // clang-format on
  else throw options::inexistent_exception("Option " + std::string(name) + " does not exist");
}

} // options_generated
} // f3d
#endif // f3d_options_generated_h
