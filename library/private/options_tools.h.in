#ifndef f3d_options_tools_h
#define f3d_options_tools_h

#include "options.h"
#include "types.h"

#include <sstream>

namespace f3d
{
namespace options_tools
{

static inline const std::string SPACE_CHARS = " \t\r\v\n";

//----------------------------------------------------------------------------
/**
 * A std::string_view trim function
 */
std::string_view trim(std::string_view s)
{
  s.remove_prefix(std::min(s.find_first_not_of(SPACE_CHARS), s.size()));
  s.remove_suffix(std::min(s.size() - s.find_last_not_of(SPACE_CHARS) - 1, s.size()));
  return s;
}

//----------------------------------------------------------------------------
/**
 * Not implemented generic templated parse method
 */
template<typename T>
T parse(const std::string& str) = delete;

//----------------------------------------------------------------------------
/**
 * Parse vector template parsing provided string into a vector
 * Split the string using ',', then rely on single version for parsing each token
 * Can throw options::parsing_exception in case of failure to parse
 */
template<typename T>
std::vector<T> parseVector(const std::string& str)
{
  // TODO implement more parsing possibilities, eg different types of tokens
  std::vector<T> vec;
  std::istringstream split(str);
  for (std::string each; std::getline(split, each, ',');)
  {
    vec.emplace_back(options_tools::parse<T>(each));
  }
  return vec;
}

//----------------------------------------------------------------------------
/**
 * Parse provided string into a bool
 * Numerical and boolaplha are both supported
 */
template<>
bool parse(const std::string& str)
{
  // TODO implement proper parsing, eg "True", "TRUE", "ON", "On", ...
  bool b1;
  bool b2;
  std::istringstream(str) >> b1;
  std::istringstream(str) >> std::boolalpha >> b2;
  return b1 || b2;
}

//----------------------------------------------------------------------------
/**
 * Parse provided string into an int
 * Rely on std::stoi for parsing
 * Can throw options::parsing_exception in case of failure to parse
 */
template<>
int parse(const std::string& str)
{
  // TODO implement more parsing possibilities ?
  try
  {
    return std::stoi(str);
  }
  catch (std::invalid_argument const&)
  {
    throw options::parsing_exception("Cannot parse " + str + " into an int");
  }
  catch (std::out_of_range const&)
  {
    throw options::parsing_exception(
      "Cannot parse " + str + " into an int as it would go out of range");
  }
}

//----------------------------------------------------------------------------
/**
 * Parse provided string into a double
 * Rely on std::stod for parsing
 * Can throw options::parsing_exception in case of failure to parse
 */
template<>
double parse(const std::string& str)
{
  // TODO implement more parsing possibilities ?
  try
  {
    return std::stod(str);
  }
  catch (std::invalid_argument const&)
  {
    throw options::parsing_exception("Cannot parse " + str + " into a double");
  }
  catch (std::out_of_range const&)
  {
    throw options::parsing_exception(
      "Cannot parse " + str + " into a double as it would go out of range");
  }
}

//----------------------------------------------------------------------------
/**
 * Parse provided string into a ratio_t
 * Rely on <double> version for parsing
 * Can throw options::parsing_exception in case of failure to parse
 */
template<>
ratio_t parse(const std::string& str)
{
  // TODO implement proper ratio parsing
  return options_tools::parse<double>(str);
}

//----------------------------------------------------------------------------
/**
 * Return provided string stripped of leading and trailing spaces.
 */
template<>
std::string parse(const std::string& str)
{
  return std::string(options_tools::trim(str));
}

//----------------------------------------------------------------------------
/**
 * Parse provided string into an int vector using parseVector method
 * Can throw options::parsing_exception in case of failure to parse
 */
template<>
std::vector<int> parse(const std::string& str)
{
  return options_tools::parseVector<int>(str);
}

//----------------------------------------------------------------------------
/**
 * Parse provided string into a double vector using parseVector method
 * Can throw options::parsing_exception in case of failure to parse
 */
template<>
std::vector<double> parse(const std::string& str)
{
  return options_tools::parseVector<double>(str);
}

//----------------------------------------------------------------------------
/**
 * Parse provided string into a string vector using parseVector method
 * Can throw options::parsing_exception in case of failure to parse
 */
template<>
std::vector<std::string> parse(const std::string& str)
{
  return options_tools::parseVector<std::string>(str);
}

// TODO Improve string generation
//----------------------------------------------------------------------------
/**
 * Generic templated string generation from provided value
 * rely on std::to_string
 */
template<typename T>
std::string format(const T& var)
{
  return std::to_string(var);
}

//----------------------------------------------------------------------------
/**
 * Format provided var into a string from provided boolean
 * using boolalpha formatting, eg: "true" or "false"
 */
template<>
std::string format(const bool& var)
{
  std::stringstream stream;
  stream << std::boolalpha << var;
  return stream.str();
}

//----------------------------------------------------------------------------
/**
 * Format provided var into a string from provided double
 * using ostringstream with std::noshowpoint
 */
template<>
std::string format(const double& var)
{
  std::ostringstream stream;
  stream << std::noshowpoint << var;
  return stream.str();
}

//----------------------------------------------------------------------------
/**
 * Format provided var into a string from provided ratio_t
 * rely on format(double&)
 */
template<>
std::string format(const ratio_t& var)
{
  // TODO generate a proper ratio string
  double val = var;
  return options_tools::format(val);
}

//----------------------------------------------------------------------------
/**
 * Generate (returns) a string from provided string
 */
template<>
std::string format(const std::string& var)
{
  return var;
}

//----------------------------------------------------------------------------
/**
 * Format provided var into a string from provided double vector
 * rely on format(double&) and add `, ` between the double values
 */
template<>
std::string format(const std::vector<double>& var)
{
  std::ostringstream stream;
  unsigned int i = 0;
  for (auto& elem : var)
  {
    stream << ((i > 0) ? ", " : "") << options_tools::format(elem);
    i++;
  }
  return stream.str();
}

//----------------------------------------------------------------------------
/**
 * Generated method, see `options::set`
 */
void set(options& opt, const std::string& name, const option_variant_t& value)
{
  try
  {
    // clang-format off
    ${_options_setter};
    // clang-format on
    else throw options::inexistent_exception("Option " + name + " does not exist");
  }
  catch (const std::bad_variant_access&)
  {
    throw options::incompatible_exception("Trying to set " + name + " with incompatible type");
  }
}

//----------------------------------------------------------------------------
/**
 * Generated method, see `options::get`
 */
option_variant_t get(const options& opt, const std::string& name)
{
  // clang-format off
  ${_options_getter};
  // clang-format on
  else throw options::inexistent_exception("Option " + name + " does not exist");
}

//----------------------------------------------------------------------------
/**
 * Generated method, see `options::getNames`
 */
std::vector<std::string> getNames()
{
  // clang-format off
  return { ${_options_lister} };
  // clang-format on
}

//----------------------------------------------------------------------------
/**
 * Generated method, see `options::setAsString`
 */
void setAsString(options& opt, const std::string& name, const std::string& str)
{
  // clang-format off
  ${_options_string_setter};
  // clang-format on
  else throw options::inexistent_exception("Option " + name + " does not exist");
}
//----------------------------------------------------------------------------
/**
 * Generated method, see `options::getAsString`
 */
std::string getAsString(const options& opt, const std::string& name)
{
  // clang-format off
  ${_options_string_getter};
  // clang-format on
  else throw options::inexistent_exception("Option " + name + " does not exist");
}
} // option_tools
} // f3d
#endif // f3d_options_tools_h
