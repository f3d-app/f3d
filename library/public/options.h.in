#ifndef f3d_options_h
#define f3d_options_h

#include "exception.h"
#include "export.h"
#include "types.h"

#include <array>
#include <string>
#include <vector>

#ifndef F3D_DISABLE_CXX17_API
#include <variant>
#endif

namespace f3d
{
#ifndef F3D_DISABLE_CXX17_API
// Declared here for simplicity
using option_variant_t = std::variant<bool, int, double, std::string, std::vector<double>>;
#endif

/**
 * @class   options
 * @brief   Class used to control the different options
 *
 * A class to control the different options of f3d.
 * See the README_libf3d.md for the full listing of options.
 * The struct below can also be consulted.
 */
class F3D_EXPORT options
{
public:
  ///@{ @name Constructors
  /**
   * Default/Copy/move constructors/operators.
   */
  options();
  ~options() = default;
  options(const options& opt) = default;
  options& operator=(const options& opt) = default;
  options(options&& other) noexcept = default;
  options& operator=(options&& other) noexcept = default;
  ///@}

#ifndef F3D_DISABLE_CXX17_API
  /**
   * Set an option as a variant based on its name
   * Please note that, on Windows, using an explicit std::string may be required:
   * https://stackoverflow.com/questions/60681710/prefer-stdstring-in-stdvariantbool-stdstring-for-const-char
   * Throw an options::inexistent_exception if option does not exist.
   * Throw an options::incompatible_exception if value is not compatible with option.
   */
  options& set(const std::string& name, const option_variant_t& value);

  /**
   * Get an option as a variant based on its name
   * Throw an options::inexistent_exception if option does not exist.
   */
  option_variant_t get(const std::string& name) const;
#endif

  /**
   * Set an option as a string based on its name
   * Use dedicated parsing code, see the related doc
   * TODO add parsing documentation
   * Throw an options::inexistent_exception if option does not exist.
   * Throw an options::parsing_exception if parsing failed.
   */
  options& setAsString(const std::string& name, const std::string& str);

  /**
   * Get an option as a string based on its name
   * Throw an options::inexistent_exception if option does not exist.
   */
  std::string getAsString(const std::string& name) const;

  /**
   * A boolean option specific method to toggle it.
   * Throw an options::inexistent_exception if option does not exist.
   * Throw an options::incompatible_exception if option is not boolean.
   */
  options& toggle(const std::string& name);

  /**
   * Compare an option between this and a provided other.
   * Return true is they are the same value, false otherwise.
   * Throw an options::inexistent_exception if option does not exist.
   */
  bool isSame(const options& other, const std::string& name) const;

  /**
   * Copy the value of an option from this to the provided other.
   * Throw an options::inexistent_exception if option does not exist.
   */
  options& copy(const options& other, const std::string& name);

  /**
   * Get all available option names.
   * XXX: Should we add a getNamesStruct with the same structure as the struct below ?
   */
  std::vector<std::string> getNames() const;

  /**
   * Get the closest option name and its Levenshtein distance.
   */
  std::pair<std::string, unsigned int> getClosestOption(const std::string& option) const;

  /**
   * Templated parsing method used internally to parse strings.
   * Implemented only for types: bool, int, double, ratio_t,
   * as well as vector for each of these types.
   * See parsing documentation for more info. TODO.
   * Throw an options::parsing_exception if parsing failed.
   */
  template<typename T>
  static T parse(const std::string& str);

  /**
   * An exception that can be thrown by the options
   * when parsing of a string into an option value fails
   */
  struct parsing_exception : public exception
  {
    explicit parsing_exception(const std::string& what = "");
  };

  /**
   * An exception that can be thrown by the options
   * when an operation on a specific option is incompatible with
   * its internal type.
   */
  struct incompatible_exception : public exception
  {
    explicit incompatible_exception(const std::string& what = "");
  };

  /**
   * An exception that can be thrown by the options
   * when a provided option does not exist.
   */
  struct inexistent_exception : public exception
  {
    explicit inexistent_exception(const std::string& what = "");
  };

  /**
   * The complete generated options struct
   */
  // clang-format off
  ${_options_struct}
  // clang-format on
};
}

#endif
